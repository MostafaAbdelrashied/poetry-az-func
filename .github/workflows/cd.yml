name: CD

on:
  workflow_call:

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: prod

    env:
      PYTHON_VERSION: "3.11"
      PACKAGES_DIR: .python_packages/lib/site-packages
      MAX_DEPLOYMENT_RETRIES: 5
      RETRY_INTERVAL: 30
      
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Poetry
        run: |
          echo "Installing and configuring Poetry..."
          pip install poetry
          poetry config virtualenvs.create false  # Disable virtual env creation

      - name: Cache Poetry dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pypoetry
            ${{ env.PACKAGES_DIR }}
          key: ${{ runner.os }}-poetry-${{ hashFiles('**/poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-

      - name: Install Dependencies
        run: |
          echo "Installing project dependencies..."
          poetry install --no-interaction --no-root --no-cache

      - name: Build Project
        run: |
          echo "Building project..."
          
          # Build poetry project
          poetry build
          
          # Create packages directory
          mkdir -p ${{ env.PACKAGES_DIR }}
          
          # Export and install requirements
          echo "Exporting requirements..."
          poetry export -f requirements.txt \
            --output requirements.txt \
            --without-hashes
          
          echo "Installing requirements to target directory..."
          pip install -r requirements.txt \
            --target="${{ env.PACKAGES_DIR }}" \
            --no-cache-dir

      - name: Azure Login
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Functions
        run: |
          echo "Deploying to Azure Functions..."
          
          # Create deployment ZIP
          zip -r deployment.zip . \
            -x "*.git*" \
            -x "*.github*" \
            -x "tests/*" \
            -x "*.pytest_cache*"
          
          # Update function app settings
          az functionapp config appsettings set \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.AZURE_FUNCTIONAPP_NAME }} \
            --settings \
              AZURE_STORAGE_CONNECTION_STRING="${{ secrets.AZURE_STORAGE_CONNECTION_STRING }}"

          # Deploy using Azure CLI
          az functionapp deployment source config-zip \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --name ${{ vars.AZURE_FUNCTIONAPP_NAME }} \
            --src deployment.zip
          

      - name: Verify Deployment
        run: |
          echo "Verifying deployment health..."
          
          endpoint="https://${{ vars.AZURE_FUNCTIONAPP_NAME }}.azurewebsites.net/"
          counter=0
          
          while [ $counter -lt ${{ env.MAX_DEPLOYMENT_RETRIES }} ]; do
            echo "Attempt $(($counter + 1))/${{ env.MAX_DEPLOYMENT_RETRIES }}"
            
            if curl -s -f -m 10 $endpoint > /dev/null; then
              echo "✅ Deployment verified successfully!"
              exit 0
            fi
            
            counter=$((counter + 1))
            
            if [ $counter -lt ${{ env.MAX_DEPLOYMENT_RETRIES }} ]; then
              echo "Waiting ${{ env.RETRY_INTERVAL }} seconds before next attempt..."
              sleep ${{ env.RETRY_INTERVAL }}
            fi
          done
          
          echo "❌ Deployment verification failed after ${{ env.MAX_DEPLOYMENT_RETRIES }} attempts"
          
          # Get function app logs for debugging
          echo "Fetching recent logs..."
          az functionapp logs tail \
            --name ${{ vars.AZURE_FUNCTIONAPP_NAME }} \
            --resource-group ${{ vars.RESOURCE_GROUP }} \
            --limit 50
          
          exit 1